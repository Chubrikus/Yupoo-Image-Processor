import parser
import new_postimg
import table
import to_izo
import get_string

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again. Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap
from PyQt5.QtCore import QThread, pyqtSignal, QTimer
import sys
import threading
import time

host_img = []
inner = 4
f_img = []


class ImageLoaderThread(QThread):
    """Поток для асинхронной загрузки изображений"""
    image_loaded = pyqtSignal(int, str)  # индекс, путь к файлу
    image_failed = pyqtSignal(int, str)  # индекс, ошибка
    progress_updated = pyqtSignal(int, str)  # прогресс, статус
    
    def __init__(self, urls, use_proxy=True):
        super().__init__()
        self.urls = urls
        self.use_proxy = use_proxy
        self.running = True
        
    def run(self):
        for i, url in enumerate(self.urls):
            if not self.running:
                break
                
            self.progress_updated.emit(
                int((i / len(self.urls)) * 100), 
                f"Загрузка изображения {i+1}/{len(self.urls)}..."
            )
            
            try:
                # Загружаем изображение
                izo = to_izo.to_img(url)
                if izo is not None:
                    # Сохраняем с уникальным именем
                    filename = f"res_{i}.jpg"
                    izo.save(filename)
                    self.image_loaded.emit(i, filename)
                else:
                    self.image_failed.emit(i, "Не удалось загрузить изображение")
            except Exception as e:
                self.image_failed.emit(i, str(e))
                
            # Небольшая задержка между загрузками
            time.sleep(0.1)
            
        self.progress_updated.emit(100, "Загрузка завершена!")
        
    def stop(self):
        self.running = False


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setGeometry(0, 0, 800, 250)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        # Добавляем переменные для асинхронной загрузки
        self.image_loader = None
        self.loaded_images = {}  # Словарь для хранения загруженных изображений
        self.current_image_set = []  # Текущий набор изображений
        
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(10, 0, 791, 241))
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()

        self.tab.setObjectName("tab")
        self.textEdit_3 = QtWidgets.QTextEdit(self.tab)
        self.textEdit_3.setGeometry(QtCore.QRect(3, 30, 521, 181))
        self.textEdit_3.setObjectName("textEdit_3")
        self.label_9 = QtWidgets.QLabel(self.tab)
        self.label_9.setGeometry(QtCore.QRect(10, 10, 191, 16))
        self.label_9.setObjectName("label_9")
        self.tabWidget.addTab(self.tab, "")

        '''
        self.tab.setObjectName("tab")
        self.tableWidget = QtWidgets.QTableWidget(self.tab)
        self.tableWidget.setGeometry(QtCore.QRect(10, 20, 771, 141))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(12)
        self.tableWidget.setRowCount(3)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(9, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(10, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(11, item)
        self.pushButton = QtWidgets.QPushButton(self.tab)
        self.pushButton.setGeometry(QtCore.QRect(160, 172, 91, 31))
        self.pushButton.setObjectName("pushButton")
        self.textEdit = QtWidgets.QTextEdit(self.tab)
        self.textEdit.setGeometry(QtCore.QRect(10, 170, 141, 31))
        self.textEdit.setObjectName("textEdit")
        self.tabWidget.addTab(self.tab, "")
        '''
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.label_2 = QtWidgets.QLabel(self.tab_2)
        self.label_2.setGeometry(QtCore.QRect(320, 150, 141, 141))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.tab_2)
        self.label_3.setGeometry(QtCore.QRect(380, 230, 141, 141))
        self.label_3.setObjectName("label_3")
        self.pushButton_2 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_2.setGeometry(QtCore.QRect(100, 180, 75, 23))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_3.setGeometry(QtCore.QRect(10, 180, 75, 23))
        self.pushButton_3.setObjectName("pushButton_3")

        self.comboBox = QtWidgets.QComboBox(self.tab_2)
        self.comboBox.setGeometry(QtCore.QRect(650, 40, 131, 21))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        #Здесь нужно добавить новую строку: self.comboBox.addItem("")

        self.pushButton_4 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_4.setGeometry(QtCore.QRect(700, 180, 75, 23))
        self.pushButton_4.setObjectName("pushButton_4")
        self.textEdit_2 = QtWidgets.QTextEdit(self.tab_2)
        self.textEdit_2.setGeometry(QtCore.QRect(650, 0, 131, 31))
        self.textEdit_2.setObjectName("textEdit_2")
        self.pushButton_5 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_5.setGeometry(QtCore.QRect(700, 70, 75, 23))
        self.pushButton_5.setObjectName("pushButton_5")
        
        # Добавляем прогресс-бар
        self.progressBar = QtWidgets.QProgressBar(self.tab_2)
        self.progressBar.setGeometry(QtCore.QRect(650, 100, 131, 23))
        self.progressBar.setObjectName("progressBar")
        self.progressBar.setMinimum(0)
        self.progressBar.setMaximum(100)
        self.progressBar.setValue(0)
        
        # Добавляем лейбл для статуса
        self.label_status = QtWidgets.QLabel(self.tab_2)
        self.label_status.setGeometry(QtCore.QRect(650, 125, 131, 16))
        self.label_status.setObjectName("label_status")
        self.label_status.setText("Готов к работе")
        
        # Добавляем чекбокс для прокси
        self.checkBox_proxy = QtWidgets.QCheckBox(self.tab_2)
        self.checkBox_proxy.setGeometry(QtCore.QRect(650, 145, 131, 17))
        self.checkBox_proxy.setObjectName("checkBox_proxy")
        self.checkBox_proxy.setText("Использовать прокси")
        self.checkBox_proxy.setChecked(True)  # По умолчанию включен
        
        self.verticalLayoutWidget_4 = QtWidgets.QWidget(self.tab_2)
        self.verticalLayoutWidget_4.setGeometry(QtCore.QRect(490, 10, 151, 151))
        self.verticalLayoutWidget_4.setObjectName("verticalLayoutWidget_4")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_4)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label_6 = QtWidgets.QLabel(self.verticalLayoutWidget_4)
        self.label_6.setText("")
        self.label_6.setObjectName("label_6")
        self.verticalLayout_4.addWidget(self.label_6)
        self.verticalLayoutWidget_5 = QtWidgets.QWidget(self.tab_2)
        self.verticalLayoutWidget_5.setGeometry(QtCore.QRect(330, 10, 151, 151))
        self.verticalLayoutWidget_5.setObjectName("verticalLayoutWidget_5")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_5)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.label_5 = QtWidgets.QLabel(self.verticalLayoutWidget_5)
        self.label_5.setText("")
        self.label_5.setObjectName("label_5")
        self.verticalLayout_5.addWidget(self.label_5)
        self.verticalLayoutWidget_6 = QtWidgets.QWidget(self.tab_2)
        self.verticalLayoutWidget_6.setGeometry(QtCore.QRect(170, 10, 151, 151))
        self.verticalLayoutWidget_6.setObjectName("verticalLayoutWidget_6")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_6)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.label_4 = QtWidgets.QLabel(self.verticalLayoutWidget_6)
        self.label_4.setText("")
        self.label_4.setObjectName("label_4")
        self.verticalLayout_6.addWidget(self.label_4)
        self.verticalLayoutWidget_7 = QtWidgets.QWidget(self.tab_2)
        self.verticalLayoutWidget_7.setGeometry(QtCore.QRect(10, 10, 151, 151))
        self.verticalLayoutWidget_7.setObjectName("verticalLayoutWidget_7")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_7)
        self.verticalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.label = QtWidgets.QLabel(self.verticalLayoutWidget_7)

        self.checkBox = QtWidgets.QCheckBox(self.tab_2)
        self.checkBox.setGeometry(QtCore.QRect(10, 160, 70, 17))
        self.checkBox.setText("")
        self.checkBox.setObjectName("checkBox")
        self.checkBox_2 = QtWidgets.QCheckBox(self.tab_2)
        self.checkBox_2.setGeometry(QtCore.QRect(170, 160, 70, 17))
        self.checkBox_2.setText("")
        self.checkBox_2.setObjectName("checkBox_2")
        self.checkBox_3 = QtWidgets.QCheckBox(self.tab_2)
        self.checkBox_3.setGeometry(QtCore.QRect(330, 160, 70, 17))
        self.checkBox_3.setText("")
        self.checkBox_3.setObjectName("checkBox_3")
        self.checkBox_4 = QtWidgets.QCheckBox(self.tab_2)
        self.checkBox_4.setGeometry(QtCore.QRect(490, 160, 70, 17))
        self.checkBox_4.setText("")
        self.checkBox_4.setObjectName("checkBox_4")

        #self.spinBox = QtWidgets.QSpinBox(self.tab_2)
        #self.spinBox.setGeometry(QtCore.QRect(650, 70, 42, 22))
        #self.spinBox.setMinimum(3)
        #self.spinBox.setObjectName("spinBox")

        self.textEdit = QtWidgets.QTextEdit(self.tab_2)
        self.textEdit.setGeometry(QtCore.QRect(340, 180, 121, 21))
        self.textEdit.setObjectName("textEdit")
        self.label_7 = QtWidgets.QLabel(self.tab_2)
        self.label_7.setGeometry(QtCore.QRect(200, 180, 131, 16))
        self.label_7.setObjectName("label_7")
        
        # Заменяем текстовое поле на кнопку выбора файла
        self.pushButton_choose_file = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_choose_file.setGeometry(QtCore.QRect(340, 180, 121, 21))
        self.pushButton_choose_file.setObjectName("pushButton_choose_file")
        self.pushButton_choose_file.setText("Выбрать файл...")
        self.pushButton_choose_file.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.pushButton_choose_file.customContextMenuRequested.connect(self.show_file_context_menu)
        
        # Скрытое поле для хранения пути к файлу
        self.textEdit = QtWidgets.QTextEdit(self.tab_2)
        self.textEdit.setGeometry(QtCore.QRect(340, 180, 121, 21))
        self.textEdit.setObjectName("textEdit")
        self.textEdit.setVisible(False)  # Скрываем текстовое поле
        
        #self.label_8 = QtWidgets.QLabel(self.tab_2)
        #self.label_8.setGeometry(QtCore.QRect(490, 180, 191, 20))
        #self.label_8.setObjectName("label_8")

        self.label.setText("")
        self.label.setObjectName("label")
        self.verticalLayout_7.addWidget(self.label)
        self.tabWidget.addTab(self.tab_2, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.add_functions()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Test_layout"))
        self.label_9.setText(_translate("MainWindow", "Введенные прокси:"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Прокси"))
        '''
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "ID"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Активно"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Раздел 1"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Раздел 2"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Артикул"))
        item = self.tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Наименование"))
        item = self.tableWidget.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "Описание"))
        item = self.tableWidget.horizontalHeaderItem(7)
        item.setText(_translate("MainWindow", "Ед. изм"))
        item = self.tableWidget.horizontalHeaderItem(8)
        item.setText(_translate("MainWindow", "Размер"))
        item = self.tableWidget.horizontalHeaderItem(9)
        item.setText(_translate("MainWindow", "Цвет"))
        item = self.tableWidget.horizontalHeaderItem(10)
        item.setText(_translate("MainWindow", "Цена"))
        item = self.tableWidget.horizontalHeaderItem(11)
        item.setText(_translate("MainWindow", "Старая цена"))
        self.pushButton.setText(_translate("MainWindow", "Редактировать"))
        self.textEdit.setHtml(_translate("MainWindow",
                                         "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                         "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                         "p, li { white-space: pre-wrap; }\n"
                                         "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Укажите ID</p></body></html>"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Таблица"))
        '''
        self.label_2.setText(_translate("MainWindow", "TextLabel"))
        self.label_3.setText(_translate("MainWindow", "TextLabel"))
        self.pushButton_2.setText(_translate("MainWindow", "Далее"))
        self.pushButton_3.setText(_translate("MainWindow", "Назад"))

        self.comboBox.setItemText(0, _translate("MainWindow", "Разделы"))
        self.comboBox.setItemText(1, _translate("MainWindow", "Брюки"))
        self.comboBox.setItemText(2, _translate("MainWindow", "Верхняя одежда"))
        self.comboBox.setItemText(3, _translate("MainWindow", "Свитеры и толстовки"))
        self.comboBox.setItemText(4, _translate("MainWindow", "Футболки и рубашки"))
        self.comboBox.setItemText(5, _translate("MainWindow", "Сумки"))
        self.comboBox.setItemText(6, _translate("MainWindow", "Аксессуары"))
        self.comboBox.setItemText(7, _translate("MainWindow", "Обувь"))
        self.comboBox.setItemText(8, _translate("MainWindow", "Нижнее белье"))
        #Здесь Дописывать новую строку например: self.comboBox.setItemText(5, _translate("MainWindow", "Носки"))

        self.pushButton_4.setText(_translate("MainWindow", "Принять"))
        self.pushButton_5.setText(_translate("MainWindow", "Загрузить"))
        self.label_7.setText(_translate("MainWindow", "Расположение таблицы:"))
        #self.label_8.setText(_translate(""))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Добавить товар"))

    def add_functions(self):
        self.pushButton_5.clicked.connect(self.start_prog)
        self.pushButton_2.clicked.connect(self.next_img)
        self.pushButton_3.clicked.connect(self.back_img)
        self.pushButton_4.clicked.connect(self.create_mas)
        self.checkBox.clicked.connect(self.choose_img1)
        self.checkBox_2.clicked.connect(self.choose_img2)
        self.checkBox_3.clicked.connect(self.choose_img3)
        self.checkBox_4.clicked.connect(self.choose_img4)
        self.pushButton_4.clicked.connect(self.create_mas)
        self.pushButton_choose_file.clicked.connect(self.choose_file)

        # self.label.mouseDoubleClickEvent.connect(self.choose_img)
    
    def choose_file(self):
        """Диалог выбора файла таблицы"""
        from PyQt5.QtWidgets import QFileDialog
        
        # Открываем диалог выбора файла
        file_path, _ = QFileDialog.getOpenFileName(
            self.centralwidget,
            "Выберите файл таблицы",
            "",  # Начальная директория
            "Excel файлы (*.xlsx *.xls);;CSV файлы (*.csv);;Все файлы (*.*)"
        )
        
        if file_path:
            # Сохраняем путь в скрытое поле
            self.textEdit.setPlainText(file_path)
            # Обновляем текст кнопки
            import os
            filename = os.path.basename(file_path)
            self.pushButton_choose_file.setText(f"📄 {filename}")
            # Показываем статус
            self.label_status.setText(f"Выбран файл: {filename}")
        else:
            self.label_status.setText("Файл не выбран")
    
    def reset_file_choice(self):
        """Сброс выбранного файла"""
        self.textEdit.setPlainText("")
        self.pushButton_choose_file.setText("Выбрать файл...")
        self.label_status.setText("Файл сброшен")
    
    def show_file_context_menu(self, position):
        """Показать контекстное меню для кнопки выбора файла"""
        from PyQt5.QtWidgets import QMenu
        
        menu = QMenu()
        
        # Добавляем действия
        reset_action = menu.addAction("Сбросить выбор")
        reset_action.triggered.connect(self.reset_file_choice)
        
        # Показываем меню
        menu.exec_(self.pushButton_choose_file.mapToGlobal(position))

    def create_mas(self):
        global host_img, f_img
        
        # Проверяем, выбран ли файл
        table_url = self.textEdit.toPlainText()
        if not table_url:
            self.label_status.setText("Ошибка: выберите файл таблицы!")
            return
            
        # Проверяем, что файл существует
        import os
        if not os.path.exists(table_url):
            self.label_status.setText("Ошибка: файл не найден!")
            return
            
        if len(host_img) == 0:
            self.label_status.setText("Ошибка: нет изображений для обработки!")
            return
            
        # Обновляем статус
        self.label_status.setText("Создание таблицы...")
        self.progressBar.setValue(50)
        
        res = ""
        res = get_string.to_string(host_img, f_img)

        mas = [
            None,  # 1
            1,  # 2
            self.comboBox.currentText(),  # 3
            None,  # 4
            None,  # 5
            None,  # 6
            None,  # 7
            None,  # 8
            None,  # 9
            None,  # 10
            None,  # 11
            None,  # 12
            res,  # 13
            self.textEdit_2.toPlainText()  # 14
        ]
        # print(mas)
        # input()
        if res == "":
            self.label_status.setText("Ошибка: нет выбранных изображений!")
            return

        try:
            table.add_img(mas, table_url)
            self.progressBar.setValue(100)
            self.label_status.setText("Таблица успешно создана!")
        except Exception as e:
            self.label_status.setText(f"Ошибка создания таблицы: {str(e)}")
            print(f"Ошибка: {e}")


    def see_img(self, url):
        """Асинхронная загрузка изображений"""
        self.current_image_set = url[:4]  # Максимум 4 изображения
        
        # Очищаем предыдущие изображения
        self.label.setPixmap(QtGui.QPixmap())
        self.label_4.setPixmap(QtGui.QPixmap())
        self.label_5.setPixmap(QtGui.QPixmap())
        self.label_6.setPixmap(QtGui.QPixmap())
        
        # Останавливаем предыдущий поток, если он запущен
        if self.image_loader and self.image_loader.isRunning():
            self.image_loader.stop()
            self.image_loader.wait()
        
        # Создаем новый поток для загрузки
        self.image_loader = ImageLoaderThread(self.current_image_set)
        
        # Подключаем сигналы
        self.image_loader.image_loaded.connect(self.on_image_loaded)
        self.image_loader.image_failed.connect(self.on_image_failed)
        self.image_loader.progress_updated.connect(self.on_progress_updated)
        
        # Запускаем загрузку
        self.image_loader.start()
        
        # Обновляем статус
        self.label_status.setText("Начинаем загрузку изображений...")
        self.progressBar.setValue(0)
    
    def on_image_loaded(self, index, filename):
        """Обработчик успешной загрузки изображения"""
        print(f"Изображение {index} загружено: {filename}")
        
        # Сохраняем информацию о загруженном изображении
        self.loaded_images[index] = filename
        
        # Отображаем изображение в соответствующем лейбле с правильным масштабированием
        pixmap = QtGui.QPixmap(filename)
        if not pixmap.isNull():
            # Масштабируем изображение под размер лейбла (149x149)
            scaled_pixmap = pixmap.scaled(149, 149, QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation)
            
            if index == 0:
                self.label.setPixmap(scaled_pixmap)
            elif index == 1:
                self.label_4.setPixmap(scaled_pixmap)
            elif index == 2:
                self.label_5.setPixmap(scaled_pixmap)
            elif index == 3:
                self.label_6.setPixmap(scaled_pixmap)
    
    def on_image_failed(self, index, error):
        """Обработчик ошибки загрузки изображения"""
        print(f"Ошибка загрузки изображения {index}: {error}")
        
        # Отображаем placeholder изображение
        placeholder_pixmap = QtGui.QPixmap(149, 149)
        placeholder_pixmap.fill(QtGui.QColor(240, 240, 240))  # Светло-серый фон
        
        # Добавляем текст ошибки
        painter = QtGui.QPainter(placeholder_pixmap)
        painter.setPen(QtGui.QColor(100, 100, 100))
        painter.drawText(placeholder_pixmap.rect(), QtCore.Qt.AlignCenter, "Ошибка\nзагрузки")
        painter.end()
        
        if index == 0:
            self.label.setPixmap(placeholder_pixmap)
        elif index == 1:
            self.label_4.setPixmap(placeholder_pixmap)
        elif index == 2:
            self.label_5.setPixmap(placeholder_pixmap)
        elif index == 3:
            self.label_6.setPixmap(placeholder_pixmap)
    
    def on_progress_updated(self, progress, status):
        """Обработчик обновления прогресса"""
        self.progressBar.setValue(progress)
        self.label_status.setText(status)
    
    def cleanup_temp_files(self):
        """Очистка временных файлов изображений"""
        import os
        for i in range(10):  # Очищаем файлы res_0.jpg до res_9.jpg
            filename = f"res_{i}.jpg"
            if os.path.exists(filename):
                try:
                    os.remove(filename)
                except:
                    pass

    def start_prog(self):
        global host_img
        global inner
        global f_img
        
        # Сбрасываем прогресс-бар
        self.progressBar.setValue(0)
        self.label_status.setText("Начинаем загрузку...")
        
        host_img = []
        f_img = []
        self.checkBox.setChecked(False)
        self.checkBox_2.setChecked(False)
        self.checkBox_3.setChecked(False)
        self.checkBox_4.setChecked(False)
        inner = 0
        url = self.textEdit_2.toPlainText()
        
        if url != "":
            print(url)
            
            # Обновляем прогресс - парсинг изображений
            self.progressBar.setValue(10)
            self.label_status.setText("Парсинг изображений...")
            
            img_down = parser.img_parser(url)
            print(img_down)
            
            # Обновляем прогресс - настройка прокси
            self.progressBar.setValue(20)
            self.label_status.setText("Настройка прокси...")
            
            texe = self.textEdit_3.toPlainText()
            file = open("proxylist.txt", "w")
            file.write(texe)
            file.close()
            
            # Обновляем прогресс - загрузка изображений
            self.progressBar.setValue(30)
            self.label_status.setText("Загрузка изображений...")
            
            # Передаем информацию о прокси
            use_proxy = self.checkBox_proxy.isChecked()
            host_img = new_postimg.post_img(img_down, use_proxy)
            
            # Обновляем прогресс - завершение
            self.progressBar.setValue(90)
            self.label_status.setText("Завершение...")
            
            for i in range(len(host_img)):
                f_img.append(0)

            # Завершаем прогресс
            self.progressBar.setValue(100)
            self.label_status.setText("Готово!")
            
            self.next_img()
        else:
            self.label_status.setText("Введите URL!")

    def choose_img1(self):
        global inner, f_img
        n = inner
        if inner % 4 != 0:
            while inner % 4 != 0:
                inner += 1
        if inner - 4 > len(f_img) - 1:
            self.checkBox.setChecked(False)
            inner = n
            return
        if self.checkBox.isChecked():
            f_img[inner - 4] = max(f_img) + 1
        else:
            f_img[inner - 4] = 0
        inner = n

    def choose_img2(self):
        global inner, f_img
        n = inner
        if inner % 4 != 0:
            while inner % 4 != 0:
                inner += 1
        if inner - 3 > len(f_img) - 1:
            inner = n
            self.checkBox_2.setChecked(False)
            return
        if self.checkBox_2.isChecked():
            f_img[inner - 3] = max(f_img) + 1
        else:
            f_img[inner - 3] = 0
        inner = n
        print(f_img)

    def choose_img3(self):
        global inner, f_img
        n = inner
        if inner % 4 != 0:
            while inner % 4 != 0:
                inner += 1
        if inner - 2 > len(f_img) - 1:
            inner = n
            self.checkBox_3.setChecked(False)
            return
        if self.checkBox_3.isChecked():
            f_img[inner - 2] = max(f_img) + 1
        else:
            f_img[inner - 2] = 0
        inner = n
        print(f_img)

    def choose_img4(self):
        global inner, f_img

        n = inner
        if inner % 4 != 0:
            while inner % 4 != 0:
                inner += 1
        if inner - 1 > len(f_img) - 1:
            inner = n
            self.checkBox_4.setChecked(False)
            return
        if self.checkBox_4.isChecked():
            f_img[inner - 1] = max(f_img) + 1
        else:
            f_img[inner - 1] = 0
        inner = n
        print(f_img)

    def next_img(self):

        global host_img, inner, f_img
        n = len(host_img)
        # print(n)
        if n <= 4:
            return
        else:
            # Сбрасываем прогресс-бар для навигации
            self.progressBar.setValue(0)
            self.label_status.setText("Навигация...")
            
            # Очищаем временные файлы
            self.cleanup_temp_files()

            new_mas = []
            i = 0

            while (inner < n) and (i < 4):

                new_mas.append(host_img[inner])
                if f_img[inner] != 0:
                    print("hi")
                    if inner % 4 == 0:
                        self.checkBox.setChecked(True)
                    if inner % 4 == 1:
                        self.checkBox_2.setChecked(True)
                    if inner % 4 == 2:
                        self.checkBox_3.setChecked(True)
                    if inner % 4 == 3:
                        self.checkBox_4.setChecked(True)
                else:

                    if inner % 4 == 0:
                        self.checkBox.setChecked(False)
                    if inner % 4 == 1:
                        self.checkBox_2.setChecked(False)
                    if inner % 4 == 2:
                        self.checkBox_3.setChecked(False)
                    if inner % 4 == 3:
                        self.checkBox_4.setChecked(False)
                inner += 1
                i += 1

            if inner % 4 != 0:
                if inner % 4 == 1:
                    self.checkBox_4.setChecked(False)
                    self.checkBox_3.setChecked(False)
                    self.checkBox_2.setChecked(False)
                if inner % 4 == 2:
                    self.checkBox_4.setChecked(False)
                    self.checkBox_3.setChecked(False)
                if inner % 4 == 3:
                    self.checkBox_4.setChecked(False)

            print("a", inner)
            self.see_img(new_mas)

    def back_img(self):
        global host_img, inner
        n = len(host_img)
        # print(n)
        if n <= 4:
            return
        if inner == 4:
            return
        else:
            # Сбрасываем прогресс-бар для навигации
            self.progressBar.setValue(0)
            self.label_status.setText("Навигация назад...")
            
            # Очищаем временные файлы
            self.cleanup_temp_files()
            
            new_mas = []
            i = 0

            if inner % 4 == 0:
                inner -= 8
            else:
                inner = inner - ((inner % 4) + 4)

            while (inner >= 0) and (i < 4):
                new_mas.append(host_img[inner])
                if f_img[inner] != 0:
                    print("hi")
                    if inner % 4 == 0:
                        self.checkBox.setChecked(True)
                    if inner % 4 == 1:
                        self.checkBox_2.setChecked(True)
                    if inner % 4 == 2:
                        self.checkBox_3.setChecked(True)
                    if inner % 4 == 3:
                        self.checkBox_4.setChecked(True)
                else:

                    if inner % 4 == 0:
                        self.checkBox.setChecked(False)
                    if inner % 4 == 1:
                        self.checkBox_2.setChecked(False)
                    if inner % 4 == 2:
                        self.checkBox_3.setChecked(False)
                    if inner % 4 == 3:
                        self.checkBox_4.setChecked(False)
                # print("added", inner)
                inner += 1
                i += 1

            print("b", inner)
            self.see_img(new_mas)

        def choose_img():
            print("Clicked")


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
